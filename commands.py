NL = '\n'

import requests
import math
import random
from pathlib import Path
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler
from telegram.constants import ParseMode

import constants

async def statistics_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	try:
		user_id = str(context.args[0])
		prog_bar = 35
		g_data = requests.get(constants.get_url("general", user_id))
		d_data = requests.get(constants.get_url("detailed", user_id))
		if g_data.status_code == 200 and d_data.status_code == 200:
			status_message = await update.effective_chat.send_message(f"*{'=' * prog_bar}*\n\nüìú –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "
																	  f"`{user_id}`...\n\n*{'=' * prog_bar}*",
																	  parse_mode=ParseMode.MARKDOWN)
			general_json = g_data.json()
			detailed_json = d_data.json()
			result = f"""*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `{user_id}`*:*\n
‚Ä¢ üßÆ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: `<task_amount>`
‚Ä¢ ‚åõ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: `<average_time>`
‚Ä¢ üíØ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–∞–ª—å–Ω—ã–µ –±–∞–ª–ª—ã): `<average_real_points>`
‚Ä¢ üÜö –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –æ—Ü–µ–Ω–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: `<average_point_difference>`
‚Ä¢ ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è: `<average_time_between_attempts>`
‚Ä¢ #Ô∏è‚É£ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π:
   ‚Ä£ üîò –° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: `<attempt_count_multichoice>`
   ‚Ä£ ‚ùì –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å: `<attempt_count_open>`
   ‚Ä£ üë®‚Äçüíª –ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞: `<attempt_count_code>`
   ‚Ä£ üíæ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞: `<attempt_count_codeedit>`
‚Ä¢ ‚ú® –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏:
   ‚Ä£ üîò –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤: `<first_try_multichoice>%`
   ‚Ä£ ‚ùì –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –æ—Ç–∫—Ä—ã—Ç—ã–º –æ—Ç–≤–µ—Ç–æ–º: `<first_try_open>%`
   ‚Ä£ üë®‚Äçüíª –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ–º –∫–æ–¥–∞: `<first_try_code>%`
   ‚Ä£ üíæ –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞: `<first_try_codeedit>%`"""
			replacements = {
				"<task_amount>": 0,
				"<average_time>": [],
				"<average_real_points>": [],
				"<average_point_difference>": [],
				"<average_time_between_attempts>": [],
				"<attempt_count_multichoice>": [],
				"<attempt_count_open>": [],
				"<attempt_count_code>": [],
				"<attempt_count_codeedit>": [],
				"<first_try_multichoice>": [],
				"<first_try_open>": [],
				"<first_try_code>": [],
				"<first_try_codeedit>": []
			}
			corresponding_type_keys = {
				"–° –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤": ["<attempt_count_multichoice>", "<first_try_multichoice>"],
				"–û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å": ["<attempt_count_open>", "<first_try_open>"],
				"–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞": ["<attempt_count_code>", "<first_try_code>"],
				"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞": ["<attempt_count_codeedit>", "<first_try_codeedit>"]
			}
			matched = []
			last_update = 0
			for n, task in enumerate(general_json):
				if task.get("task_id") in matched:
					continue
				matched.append(task.get("task_id"))
				matching = constants.find_dicts_with_key(detailed_json, "task_id", task.get("task_id"))
				times = []
				for i in matching:
					times.append(constants.time_dict_to_seconds(constants.divide_time_string(i.get("time"))))
				times = sorted(times)
				average_time = 0
				if len(times) > 1:
					attempt_times = []
					for i in range(0, len(times)-1):
						attempt_times.append(abs(times[i+1] - times[i]) / 60)
					average_time = constants.get_average(attempt_times)
				else:
					average_time = float(constants.get_average(
						[int(constants.remove_letters(i)) for i in task.get("real_time").split("-")]
					))
				replacements["<average_time>"].append(average_time)
				replacements["<average_real_points>"].append(task.get("real_points"))
				replacements["<average_point_difference>"].append(task.get("real_points") - task.get("points"))
				replacements["<average_time_between_attempts>"].append(average_time / task.get("attempts"))
				
				t_data = requests.get(constants.get_url("task", str(task.get("task_id"))))
				if t_data.status_code != 200:
					if t_data.status_code == 404:
						await update.effective_chat.send_message(f"‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ c *ID* `{task.get('task_id')}` "
																 f"–±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
																 parse_mode=ParseMode.MARKDOWN)
					else:
						await update.effective_chat.send_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏ "
																 f"`{task.get('task_id')}` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "
																 f"`{t_data.status_code}`. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.",
																 parse_mode=ParseMode.MARKDOWN)
				else:
					task_json = t_data.json()
					replacements[corresponding_type_keys.get(task_json.get("type"))[0]].append(task.get("attempts"))
					replacements[corresponding_type_keys.get(task_json.get("type"))[1]].append(1 if task.get("attempts") == 1 else 0)
				last_update -= 1
				if last_update <= 0 or n >= len(general_json)-1:
					last_update = random.randint(5, 9)
					percent = round(((n + 1) / len(general_json)) * 100)
					mapped = math.floor(constants.num_to_range(percent, 0, 100, 0, prog_bar))
					bar_string = f"*{'#' * mapped}{'=' * (prog_bar - mapped)}*"
					await status_message.edit_text(f"{bar_string}\n\n"
												   f"{status_message.text_markdown.split(NL)[2]}\n\n"
												   f"*[{percent}% "
												   f"({n + 1}/{len(general_json)})]* "
												   f"*ID* `{task.get('task_id')}`\n\n"
												   f"{bar_string}",
												   parse_mode=ParseMode.MARKDOWN)
			replacements["<task_amount>"] = str(len(matched))
			replacements["<average_time>"] = str(round(
				constants.get_average(replacements["<average_time>"])
			)) + " " + constants.minute_add_end(round(constants.get_average(replacements["<average_time>"])))
			replacements["<average_real_points>"] = round(
				constants.get_average(replacements["<average_real_points>"]), 1
			)
			replacements["<average_point_difference>"] = round(
				constants.get_average(replacements["<average_point_difference>"]), 1
			)
			replacements["<average_time_between_attempts>"] = str(round(
				constants.get_average(replacements["<average_time_between_attempts>"])
			)) + " " + constants.minute_add_end(round(constants.get_average(replacements["<average_time_between_attempts>"])))
			for k in corresponding_type_keys:
				task_type = corresponding_type_keys[k]
				replacements[task_type[0]] = str(round(constants.get_average(replacements[task_type[0]]), 1)) + \
										  f" (–≤—Å–µ–≥–æ: {len(replacements[task_type[0]])})"
				replacements[task_type[1]] = str(round(constants.get_average(replacements[task_type[1]]) * 100, 1))
			for r in replacements:
				result = result.replace(r, str(replacements[r]))
			await update.effective_chat.send_message(result, parse_mode=ParseMode.MARKDOWN)
		else:
			if g_data.status_code == d_data.status_code == 404:
				await update.effective_chat.send_message(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π `<user_id>`. –ù–µ–æ–±—Ö–æ–¥–∏–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—å–µ–ª—è —Å —Å–∞–π—Ç–∞ "
														 f"`innoprog.ru`.",
														 parse_mode=ParseMode.MARKDOWN)
			else:
				await update.effective_chat.send_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n"
														 f"–°—Ç–∞—Ç—É—Å –∫–æ–¥ (–æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è): `{g_data.status_code}`\n"
														 f"–°—Ç–∞—Ç—É—Å –∫–æ–¥ (–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è): `{d_data.status_code}`",
														 parse_mode=ParseMode.MARKDOWN)
	except (IndexError, ValueError) as e:
		await update.effective_chat.send_message("üåê –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /statistics `<user_id>`\n",
												 parse_mode=ParseMode.MARKDOWN)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
	cmds = {
		"start": [["help", "h"], "–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥"],
		"statistics `<user_id>`": [["stats `<user_id>`", "st `<user_id>`"], "–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"]
	}
	result = ""
	for k in cmds:
		cmd_variants = ""
		if len(cmds[k][0]) > 0:
			for i in cmds[k][0]:
				cmd_variants += f" | /{i}"
		result += f"/{k}{cmd_variants} - _{cmds[k][1]}_\n"
	await update.effective_chat.send_message(f"{'*=*' * 50}\n\n{result}\n{'*=*' * 50}", parse_mode=ParseMode.MARKDOWN)

COMMAND_LIST = {
	"start": [["help", "h"], help_cmd],
	"statistics": [["stats", "st"], statistics_cmd],
}
